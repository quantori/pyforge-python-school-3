name: Run tests workflow

on:
  push:
    branches:
      - main  
      - develop
      - feature/*

  pull_request:
    branches:
      - main
      - develop
      - feature/*

jobs:
  lint:
    name: Run flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install flake8
        run: |
          pip install flake8

      - name: Run flake8
        run: |
          flake8 .
      
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  cache:
    name: Cache Docker layers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            ~/.docker
            /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

  test:
    name: Run tests with pytest
    runs-on: ubuntu-latest
    needs: [lint, cache]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start Docker containers
        run: docker-compose up -d

      - name: Wait for Redis to be ready
        run: |
          for i in {1..30}; do
            if docker-compose exec -T redis redis-cli ping | grep -q PONG; then
              echo "Redis is ready"
              break
            fi
            echo "Waiting for Redis..."
            sleep 1
          done
        shell: bash

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..60}; do
            if docker-compose exec -T db pg_isready -U user; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
        shell: bash

      - name: Install Python dependencies
        run: docker-compose exec -T web1 pip install -r requirements.txt

      - name: Run Alembic migrations
        run: docker-compose exec -T web1 alembic upgrade head
        
      - name: Run tests with pytest
        run: docker-compose exec -T web1 pytest tests/test.py -vv
        
      - name: Shutdown Docker containers
        if: always()
        run: docker-compose down
